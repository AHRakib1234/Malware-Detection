# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.svm import SVC


# Read CSV files
malware_data = pd.read_csv("mal_api_call_features.csv")
benign_data = pd.read_csv("ben_api_call_features.csv")

# Add labels for malware and benign samples
malware_data['label'] = 1
benign_data['label'] = 0

# Merge the datasets based on hash (assuming both CSVs have the same hashes)
merged_data = pd.concat([malware_data, benign_data], ignore_index=True)

# Fill NaN values with 0
merged_data = merged_data.fillna(0)

# Separate features (API call IDs) and labels (malware/benign)
X = merged_data.drop(columns=["Name", "label"])
y = merged_data["label"]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest classifier

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)

# Make predictions on the testing data
predictions = rf_classifier.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, predictions))

clf_gbm = GradientBoostingClassifier()
clf_gbm.fit(X_train, y_train)

# Make predictions on the testing data
predictions = clf_gbm.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, predictions))

svm_classifier = SVC()

# Train the classifier
svm_classifier.fit(X_train, y_train)

# Make predictions on the testing data
predictions = svm_classifier.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, predictions))
